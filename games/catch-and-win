
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cosmic Catcher: A Customizable Adventure</title>
    <style>
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #001f3f;
            font-family: Arial, sans-serif;
            color: #fff;
        }
        .game-wrapper {
            display: flex;
            gap: 20px;
        }
        #game-container {
            width: 600px;
            height: 600px;
            background-color: rgba(0, 0, 51, 0.8);
            position: relative;
            overflow: hidden;
            border: 3px solid #ffd700;
            border-radius: 10px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='400' height='400' viewBox='0 0 800 800'%3E%3Cg fill='none' stroke='%23404' stroke-width='1'%3E%3Cpath d='M769 229L1037 260.9M927 880L731 737 520 660 309 538 40 599 295 764 126.5 879.5 40 599-197 493 102 382-31 229 126.5 79.5-69-63'/%3E%3Cpath d='M-31 229L237 261 390 382 603 493 308.5 537.5 101.5 381.5M370 905L295 764'/%3E%3Cpath d='M520 660L578 842 731 737 840 599 603 493 520 660 295 764 309 538 390 382 539 269 769 229 577.5 41.5 370 105 295 -36 126.5 79.5 237 261 102 382 40 599 -69 737 127 880'/%3E%3Cpath d='M520-140L578.5 42.5 731-63M603 493L539 269 237 261 370 105M902 382L539 269M390 382L102 382'/%3E%3Cpath d='M-222 42L126.5 79.5 370 105 539 269 577.5 41.5 927 80 769 229 902 382 603 493 731 737M295-36L577.5 41.5M578 842L295 764M40-201L127 80M102 382L-261 269'/%3E%3C/g%3E%3Cg fill='%23505'%3E%3Ccircle cx='769' cy='229' r='5'/%3E%3Ccircle cx='539' cy='269' r='5'/%3E%3Ccircle cx='603' cy='493' r='5'/%3E%3Ccircle cx='731' cy='737' r='5'/%3E%3Ccircle cx='520' cy='660' r='5'/%3E%3Ccircle cx='309' cy='538' r='5'/%3E%3Ccircle cx='295' cy='764' r='5'/%3E%3Ccircle cx='40' cy='599' r='5'/%3E%3Ccircle cx='102' cy='382' r='5'/%3E%3Ccircle cx='127' cy='80' r='5'/%3E%3Ccircle cx='370' cy='105' r='5'/%3E%3Ccircle cx='578' cy='42' r='5'/%3E%3Ccircle cx='237' cy='261' r='5'/%3E%3Ccircle cx='390' cy='382' r='5'/%3E%3C/g%3E%3C/svg%3E");
        }
        #player {
            width: 80px;
            height: 20px;
            background-color: #ff6b6b;
            position: absolute;
            bottom: 10px;
            left: 50%;
            transform: translateX(-50%);
            border-radius: 10px;
        }
        .game-object {
            position: absolute;
            font-size: 30px;
        }
        #score, #missed {
            position: absolute;
            color: #fff;
            font-size: 18px;
        }
        #score {
            top: 10px;
            left: 10px;
        }
        #missed {
            top: 10px;
            right: 10px;
        }
        #stats {
            width: 200px;
            background-color: rgba(0, 0, 51, 0.8);
            border: 2px solid #4a4a8a;
            border-radius: 10px;
            padding: 15px;
        }
        #stats h2 {
            text-align: center;
            margin-top: 0;
            color: #ffd700;
        }
        .stat-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }
        #intro-screen {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 51, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }
        #intro-screen input, #intro-screen select, #intro-screen button {
            margin: 10px;
            padding: 5px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div class="game-wrapper">
        <div id="game-container">
            <div id="player"></div>
            <div id="score">Score: <span id="score-value">0</span></div>
            <div id="missed">Missed: <span id="missed-value">0</span></div>
            <div id="intro-screen">
                <h2>Welcome to Cosmic Catcher!</h2>
                <input type="text" id="player-name" placeholder="Enter your name">
                <select id="theme-select">
                    <option value="cosmic">Cosmic Stars</option>
                    <option value="animals">Animals</option>
                    <option value="fruits">Fruits</option>
                </select>
                <button onclick="startGame()">Start Game</button>
            </div>
        </div>
        <div id="stats">
            <h2>Cosmic Scorecard</h2>
        </div>
    </div>

    <script>
        const gameContainer = document.getElementById('game-container');
        const player = document.getElementById('player');
        const scoreValue = document.getElementById('score-value');
        const missedValue = document.getElementById('missed-value');
        const statsDiv = document.getElementById('stats');
        const introScreen = document.getElementById('intro-screen');

        let score = 0;
        let missed = 0;
        let gameSpeed = 2;
        let lastSpeedIncrease = 0;
        let playerName = "";
        let selectedTheme = "";

        const themes = {
            cosmic: [
                { symbol: '⭐', points: 1, name: 'Star' },
                { symbol: '🌙', points: 2, name: 'Moon' },
                { symbol: '☀️', points: 3, name: 'Sun' },
                { symbol: '🪐', points: 5, name: 'Saturn' },
                { symbol: '🌎', points: 4, name: 'Earth' },
                { symbol: '🔴', points: 4, name: 'Mars' },
                { symbol: '🪷', points: 4, name: 'Venus' },
                { symbol: '🌌', points: 6, name: 'Galaxy' },
                { symbol: '☄️', points: 7, name: 'Comet' },
                { symbol: '🔮', points: 0, name: 'Magic Ball', special: 'slow' },
                { symbol: '🚀', points: 0, name: 'Rocket', special: 'fast' }
            ],
            animals: [
                { symbol: '🐶', points: 1, name: 'Dog' },
                { symbol: '🐱', points: 2, name: 'Cat' },
                { symbol: '🐼', points: 3, name: 'Panda' },
                { symbol: '🦁', points: 5, name: 'Lion' },
                { symbol: '🐘', points: 4, name: 'Elephant' },
                { symbol: '🦒', points: 4, name: 'Giraffe' },
                { symbol: '🐧', points: 4, name: 'Penguin' },
                { symbol: '🦋', points: 6, name: 'Butterfly' },
                { symbol: '🐳', points: 7, name: 'Whale' },
                { symbol: '🐢', points: 0, name: 'Turtle', special: 'slow' },
                { symbol: '🐆', points: 0, name: 'Leopard', special: 'fast' }
            ],
            fruits: [
                { symbol: '🍎', points: 1, name: 'Apple' },
                { symbol: '🍌', points: 2, name: 'Banana' },
                { symbol: '🍇', points: 3, name: 'Grapes' },
                { symbol: '🍓', points: 5, name: 'Strawberry' },
                { symbol: '🍊', points: 4, name: 'Orange' },
                { symbol: '🍉', points: 4, name: 'Watermelon' },
                { symbol: '🍑', points: 4, name: 'Peach' },
                { symbol: '🥭', points: 6, name: 'Mango' },
                { symbol: '🍍', points: 7, name: 'Pineapple' },
                { symbol: '🫐', points: 0, name: 'Blueberries', special: 'slow' },
                { symbol: '🥝', points: 0, name: 'Kiwi', special: 'fast' }
            ]
        };

        let gameObjects = [];
        let objectStats = {};

        function startGame() {
            playerName = document.getElementById('player-name').value || "Player";
            selectedTheme = document.getElementById('theme-select').value;
            gameObjects = themes[selectedTheme];
            objectStats = {};
            gameObjects.forEach(obj => objectStats[obj.name] = 0);
            introScreen.style.display = 'none';
            updateStats();
            setInterval(createGameObject, 1000);
        }

        function updateStats() {
            statsDiv.innerHTML = `<h2>${playerName}'s Scorecard</h2>`;
            Object.entries(objectStats).forEach(([name, count]) => {
                const obj = gameObjects.find(o => o.name === name);
                statsDiv.innerHTML += `
                    <div class="stat-item">
                        <span>${obj.symbol} ${name}</span>
                        <span>${count}</span>
                    </div>
                `;
            });
        }

        function movePlayer(e) {
            const gameRect = gameContainer.getBoundingClientRect();
            const playerRect = player.getBoundingClientRect();
            const maxX = gameRect.width - playerRect.width;
            let x = e.clientX - gameRect.left - playerRect.width / 2;
            x = Math.max(0, Math.min(x, maxX));
            player.style.left = x + 'px';
        }

        function createGameObject() {
            const object = document.createElement('div');
            const gameObject = gameObjects[Math.floor(Math.random() * gameObjects.length)];
            object.className = 'game-object';
            object.innerHTML = gameObject.symbol;
            object.style.left = Math.random() * (gameContainer.offsetWidth - 30) + 'px';
            object.style.top = '0px';
            gameContainer.appendChild(object);

            let isRemoved = false;

            function moveObject() {
                if (isRemoved) return;

                let topPosition = parseInt(object.style.top);
                if (topPosition < gameContainer.offsetHeight) {
                    object.style.top = (topPosition + gameSpeed) + 'px';
                    requestAnimationFrame(moveObject);

                    const playerRect = player.getBoundingClientRect();
                    const objectRect = object.getBoundingClientRect();

                    if (
                        objectRect.bottom >= playerRect.top &&
                        objectRect.right >= playerRect.left &&
                        objectRect.left <= playerRect.right
                    ) {
                        if (!isRemoved) {
                            gameContainer.removeChild(object);
                            isRemoved = true;
                            score += gameObject.points;
                            scoreValue.textContent = score;
                            objectStats[gameObject.name]++;
                            updateStats();
                            
                            if (gameObject.special === 'slow') {
                                gameSpeed = Math.max(1, gameSpeed - 1);
                            } else if (gameObject.special === 'fast') {
                                gameSpeed += 1;
                            }
                            
                            // Increase speed every 20 points
                            if (score > lastSpeedIncrease + 20) {
                                gameSpeed += 0.5;
                                lastSpeedIncrease = score;
                            }
                        }
                    }
                } else {
                    if (!isRemoved) {
                        gameContainer.removeChild(object);
                        isRemoved = true;
                        missed++;
                        missedValue.textContent = missed;
                    }
                }
            }

            requestAnimationFrame(moveObject);
        }

        gameContainer.addEventListener('mousemove', movePlayer);
        gameContainer.addEventListener('touchmove', (e) => {
            e.preventDefault();
            movePlayer(e.touches[0]);
        });
    </script>
</body>
</html>
